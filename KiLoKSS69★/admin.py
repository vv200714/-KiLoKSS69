import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder


# States –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
class AdminState(StatesGroup):
    waiting_for_product_name = State()
    waiting_for_product_description = State()
    waiting_for_product_price = State()
    waiting_for_product_category = State()
    waiting_for_product_sizes = State()
    waiting_for_product_photo = State()


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if os.path.exists("bot_data.json"):
        with open("bot_data.json", 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"carts": {}, "orders": {}, "order_counter": 1, "products": {}}


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open("bot_data.json", 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
ADMIN_IDS = []  # –í–∞—à Telegram ID


def is_admin(user_id):
    return user_id in ADMIN_IDS


def get_admin_menu():
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"))
    builder.row(types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
    builder.row(types.KeyboardButton(text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã"))
    builder.row(types.KeyboardButton(text="üë§ –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é"))
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True)


def get_products_management_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")
    builder.button(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="list_products")
    builder.button(text="üè† –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(1)
    return builder.as_markup()


def get_categories_kb_admin():
    builder = InlineKeyboardBuilder()
    categories = ["–§—É—Ç–±–æ–ª–∫–∏", "–•—É–¥–∏", "–®—Ç–∞–Ω—ã", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"]
    for category in categories:
        builder.button(text=category, callback_data=f"admin_category_{category}")
    builder.adjust(2)
    return builder.as_markup()


def get_orders_management_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="üì• –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="new_orders")
    builder.button(text="üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data="all_orders")
    builder.button(text="‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="completed_orders")
    builder.button(text="üè† –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(1)
    return builder.as_markup()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
async def cmd_admin(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    await message.answer(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å KiLoKSS69‚òÖ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_menu(),
        parse_mode='HTML'
    )


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏
async def manage_products(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    await message.answer(
        "üõçÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_products_management_kb(),
        parse_mode='HTML'
    )


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def show_stats(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    data = load_data()
    total_orders = sum(len(orders) for orders in data.get("orders", {}).values())
    total_users = len(data.get("carts", {}))

    # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–∞—Ö
    total_in_carts = 0
    for cart in data.get("carts", {}).values():
        total_in_carts += len(cart)

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: <b>{total_orders}</b>\n"
        f"üõí –¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–∞—Ö: <b>{total_in_carts}</b>\n"
        f"üí∞ –í—ã—Ä—É—á–∫–∞: <b>—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è...</b>\n\n"
        f"üÜî ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: <code>{message.from_user.id}</code>"
    )

    await message.answer(stats_text, parse_mode='HTML')


# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
async def show_all_orders(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    data = load_data()
    orders = data.get("orders", {})

    if not any(orders.values()):
        await message.answer("üì¶ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    orders_text = "üì¶ <b>–í—Å–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"

    for user_id, user_orders in orders.items():
        for order in user_orders:
            orders_text += f"üÜî <b>–ó–∞–∫–∞–∑ ‚Ññ{order['id']}</b>\n"
            orders_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            orders_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.get('customer_phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            orders_text += f"üí∞ –°—É–º–º–∞: {order['total']} —Ä—É–±.\n"
            orders_text += f"üìä –°—Ç–∞—Ç—É—Å: {order.get('status', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ')}\n"
            orders_text += f"üìÖ –î–∞—Ç–∞: {order.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"

            orders_text += "<b>–¢–æ–≤–∞—Ä—ã:</b>\n"
            for item in order['items']:
                orders_text += f"‚Ä¢ {item['name']} ({item['size']}) - {item['quantity']}—à—Ç.\n"

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=f"complete_order_{order['id']}_{user_id}")
            builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_order_{order['id']}_{user_id}")
            builder.adjust(2)

            await message.answer(orders_text, reply_markup=builder.as_markup(), parse_mode='HTML')
            orders_text = "‚îÄ" * 30 + "\n\n"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def handle_admin_callbacks(callback: types.CallbackQuery, bot: Bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = load_data()

    if callback.data == "admin_menu":
        await callback.message.answer(
            "üë®‚Äçüíª –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_menu()
        )

    elif callback.data == "add_product":
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=types.ReplyKeyboardRemove()
        )
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞

    elif callback.data.startswith("complete_order_"):
        parts = callback.data.split("_")
        order_id = int(parts[2])
        user_id = int(parts[3])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        for uid, orders in data["orders"].items():
            if int(uid) == user_id:
                for order in orders:
                    if order["id"] == order_id:
                        order["status"] = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω"
                        break
                break

        save_data(data)
        await callback.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π")
        await callback.answer()

    elif callback.data.startswith("cancel_order_"):
        parts = callback.data.split("_")
        order_id = int(parts[2])
        user_id = int(parts[3])

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        for uid, orders in data["orders"].items():
            if int(uid) == user_id:
                for order in orders:
                    if order["id"] == order_id:
                        order["status"] = "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
                        break
                break

        save_data(data)
        await callback.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ ‚Ññ{order_id} –æ—Ç–º–µ–Ω–µ–Ω")
        await callback.answer()

    await callback.answer()


# –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ admin.py —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:

def get_product_management_kb():
    builder = InlineKeyboardBuilder()
    builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="refresh_products")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="products_stats")
    builder.button(text="üè† –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="admin_menu")
    builder.adjust(1)
    return builder.as_markup()


async def add_product_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await callback.message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        parse_mode='HTML'
    )
    await state.set_state(AdminState.waiting_for_product_name)
    await callback.answer()


@dp.message(AdminState.waiting_for_product_name)
async def process_product_name(message: types.Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await state.set_state(AdminState.waiting_for_product_description)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")


@dp.message(AdminState.waiting_for_product_description)
async def process_product_description(message: types.Message, state: FSMContext):
    await state.update_data(product_description=message.text)
    await state.set_state(AdminState.waiting_for_product_price)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")


@dp.message(AdminState.waiting_for_product_price)
async def process_product_price(message: types.Message, state: FSMContext):
    try:
        price = int(message.text)
        await state.update_data(product_price=price)
        await state.set_state(AdminState.waiting_for_product_category)

        builder = InlineKeyboardBuilder()
        categories = ["–§—É—Ç–±–æ–ª–∫–∏", "–•—É–¥–∏", "–®—Ç–∞–Ω—ã", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"]
        for category in categories:
            builder.button(text=category, callback_data=f"admin_category_{category}")
        builder.button(text="‚ûï –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="new_category")
        builder.adjust(2)

        await message.answer(
            "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=builder.as_markup()
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")


@dp.callback_query(AdminState.waiting_for_product_category)
async def process_product_category(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "new_category":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        await state.set_state(AdminState.waiting_for_product_category)
    else:
        category = callback.data.replace("admin_category_", "")
        await state.update_data(product_category=category)
        await state.set_state(AdminState.waiting_for_product_sizes)
        await callback.message.answer(
            "üìè –í–≤–µ–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: S,M,L,XL):"
        )
    await callback.answer()


@dp.message(AdminState.waiting_for_product_sizes)
async def process_product_sizes(message: types.Message, state: FSMContext):
    sizes = [size.strip() for size in message.text.split(",")]
    await state.update_data(product_sizes=sizes)
    await state.set_state(AdminState.waiting_for_product_photo)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ URL:")


@dp.message(AdminState.waiting_for_product_photo)
async def process_product_photo(message: types.Message, state: FSMContext):
    photo_url = ""

    if message.photo:
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ, –ø–æ–ª—É—á–∞–µ–º file_id
        photo_url = message.photo[-1].file_id
    elif message.text and message.text.startswith("http"):
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω URL
        photo_url = message.text
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL:")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    new_product = {
        "id": len(products.get(data['product_category'], [])) + 1,
        "name": data['product_name'],
        "price": data['product_price'],
        "sizes": data['product_sizes'],
        "description": data['product_description'],
        "photo": photo_url,
        "details": "–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    }

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if data['product_category'] not in products:
        products[data['product_category']] = []

    products[data['product_category']].append(new_product)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_data({
        "carts": user_carts,
        "orders": user_orders,
        "order_counter": order_counter,
        "products": products
    })

    await message.answer(
        f"‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {new_product['name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {new_product['price']} —Ä—É–±.\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['product_category']}\n"
        f"üìè –†–∞–∑–º–µ—Ä—ã: {', '.join(new_product['sizes'])}",
        parse_mode='HTML',
        reply_markup=get_admin_menu()
    )

    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
async def show_products_list(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    products_text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"

    for category, category_products in products.items():
        products_text += f"üìÇ <b>{category}</b>\n"
        for product in category_products:
            products_text += f"‚Ä¢ {product['name']} - {product['price']} —Ä—É–±.\n"
        products_text += "\n"

    await message.answer(products_text, parse_mode='HTML', reply_markup=get_product_management_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
@dp.callback_query(F.data == "add_product")
async def add_product_callback(callback: types.CallbackQuery, state: FSMContext):
    await add_product_start(callback, state)


@dp.callback_query(F.data == "list_products")
async def list_products_callback(callback: types.CallbackQuery):
    await show_products_list(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "refresh_products")
async def refresh_products_callback(callback: types.CallbackQuery):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
    await callback.message.answer("üîÑ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await show_products_list(callback.message)
    await callback.answer()


@dp.callback_query(F.data == "products_stats")
async def products_stats_callback(callback: types.CallbackQuery):
    total_products = sum(len(category) for category in products.values())
    total_categories = len(products)

    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{total_products}</b>\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: <b>{total_categories}</b>\n"
    )

    for category, category_products in products.items():
        stats_text += f"‚Ä¢ {category}: {len(category_products)} —Ç–æ–≤–∞—Ä–æ–≤\n"

    await callback.message.answer(stats_text, parse_mode='HTML')
    await callback.answer()
